from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters import IDFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from models.db_api import methods as db
from models.database import async_db_session
from models.bot import Bots
from models.channel import Channels
from models.user import Users

import logging

import asyncio

menus = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'))

dating = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫')).add(KeyboardButton('–ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç'))

searching = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫'))


ADMIN = [235519518, 5161665132]

logging.basicConfig(level=logging.INFO)
bot = Bot(token="1682322424:AAE30aCB0ZY7hH6P7-CtKqGBay34ZN9mPiY")
dp = Dispatcher(bot)


@dp.message_handler(IDFilter(chat_id=ADMIN), commands="pub")
async def pub(message: types.Message):
    msg = message.text[4:]
    if len(msg) < 5:
        await message.answer('–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π')
        return
    users = await Users.get_all()
    for i in users:
        await bot.send_message(i.user, msg)
        await asyncio.sleep(0.4)
    await message.answer("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@dp.message_handler(IDFilter(chat_id=ADMIN), commands="bot")
async def add_bot(message: types.Message):
    msg = message.text.split(' ')
    if len(msg) < 2:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ: /bot token')
        return
    await Bots.create(bot=msg[1])
    await message.answer("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")


@dp.message_handler(IDFilter(chat_id=ADMIN), commands="channel")
async def add_channel(message: types.Message):
    msg = message.text.split(' ')
    if len(msg) < 2 or msg[1][0] != '@':
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ: /channel @channel')
        return
    await Channels.create(channel=msg[1])
    await message.answer("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")


@dp.message_handler(IDFilter(chat_id=ADMIN), commands="bots")
async def all_bots(message: types.Message):
    text = '–í–æ—Ç —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤:\n'
    bots = await Bots.get_all()
    for i in bots:
        text += i.bot+'\n'
    await message.answer(text)


@dp.message_handler(IDFilter(chat_id=ADMIN), commands="channels")
async def all_channels(message: types.Message):
    text = '–í–æ—Ç –∫–∞–Ω–∞–ª—ã:\n'
    channels = await Channels.get_all()
    for i in channels:
        text += i.channel+'\n'
    await message.answer(text)

@dp.message_handler(IDFilter(chat_id=ADMIN), commands="del_bot")
async def delete_bot(message: types.Message):
    msg = message.text.split(' ')
    if len(msg) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ: /del_bot token")
        return
    channel = await Bots.get_bot(bot=msg[1])
    if channel is None:
        await message.answer("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await Bots.delete_bot(bot=msg[1])
    await message.answer("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")


@dp.message_handler(IDFilter(chat_id=ADMIN), commands="del_channel")
async def delete_channel(message: types.Message):
    msg = message.text.split(' ')
    if len(msg) < 2 or msg[1][0] != '@':
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ: /del_channel @channel")
        return
    channel = await Channels.get_channel(channel=msg[1])
    if channel is None:
        await message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await Channels.delete_channel(channel=msg[1])
    await message.answer("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")

@dp.message_handler(commands="start")
async def menu(message: types.Message):
    user = await Users.get(user=message.from_user.id)
    print(user)
    if user is None:
        await Users.create(user=message.from_user.id)
    await message.answer("ü´Ç–î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /search, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", reply_markup=menus)

 
@dp.message_handler(commands="search")
@dp.message_handler(text='–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫')
async def search_user_act(message: types.Message):
    bots = await Bots.get_all()
    channels = await Channels.get_all()
    to_sub = []
    to_start = []

    for i in bots:
        bot2 = Bot(token=i.bot)
        try:
            await bot2.send_chat_action(message.from_user.id, 'typing')
            #await bot2.session.close()
        except Exception as e:
            print(e)
            username = (await bot2.get_me()).username
            to_start.append('@'+username)
        sess = await bot2.get_session()
        await sess.close()
    
    for i in channels:
        user = await bot.get_chat_member(i.channel, message.from_user.id)
        if user.status == 'left' or user.status == 'banned':
            to_sub.append(i.channel)
    
    if len(to_sub) > 0 or len(to_start) > 0:
        text = ''
        
        if len(to_sub) > 0:
            text += '–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã:\n'
            for i in to_sub:
                text += i+'\n'
        
        if len(to_start) > 0:
            text += '–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤:\n'
            for i in to_start:
                text += i+'\n'
        
        await message.answer(text)
        return
    if message.chat.type == "private":
        chatting = await db.get_user(chat=True, user=message.from_user.id)
        print(chatting)
        if chatting is not None:
            await message.answer("üßê–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n\nüí°–î–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ç–æ–∏—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥")
        else:
            in_queue = await db.get_user(user=message.from_user.id)
            print(in_queue)
            if in_queue is None:
                interlocutor = await db.get_user()

                if interlocutor is None:
                    await db.insert_queue(user=message.from_user.id)
                    await message.answer("üîç–ù–∞—á–∞–ª –∏—Å–∫–∞—Ç—å –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... \n\nüí°–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–ø–∏—Å–∞–≤ /stop_search, –∏–ª–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É", reply_markup=searching)
                else:
                    queues = await db.count_queue()
                    print(queues)
                    if queues != 0:
                        try:
                            await db.delete_queue(user=message.from_user.id)
                        except Exception as e:
                            print(e)
                        try:
                            await db.delete_queue(user=interlocutor.user)
                        except Exception as e:
                            print(e)

                        await db.insert_chat(user=message.from_user.id, interlocutor=interlocutor.user)
                        await db.insert_chat(user=interlocutor.user, interlocutor=message.from_user.id)


                        chat_info = await db.get_interlocutor(user=message.from_user.id, interlocutor=interlocutor.user)

                        await message.answer(f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è.", reply_markup=dating)
                        await bot.send_message(text=f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è.", chat_id=chat_info.interlocutor, reply_markup=dating)
                    else:
                        await db.insert_queue(user=message.from_user.id)
                        await message.answer("üîç–ù–∞—á–∞–ª –∏—Å–∫–∞—Ç—å –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... \n\nüí°–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–ø–∏—Å–∞–≤ /stop_search, –∏–ª–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É", reply_markup=searching)

            else:
                await message.answer("üßê–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ\n\nüí°–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ‚Äì —è –≤–∞—Å —Å–≤—è–∂—É")
 
@dp.message_handler(commands="stop_search")
@dp.message_handler(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫')
async def stop_search_act(message: types.Message):
    user = await db.get_user(user=message.from_user.id)
    print(user)
    if user is not None:
        await db.delete_queue(user=message.from_user.id)
        await menu(message)
    else:
        await message.answer("‚ùå–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å")

@dp.message_handler(commands="next")
@dp.message_handler(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫')
async def next(message: types.Message):
    user = await db.get_user(chat=True, user=message.from_user.id)
    print(user)
    if user is not None:
        await db.delete_chat(user=message.from_user.id)
        await db.delete_chat(user=user.interlocutor)
        await bot.send_message(text="üòî–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø–æ–∫–∏–Ω—É—Ç—å –¥–∏–∞–ª–æ–≥...\n\nüí°–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?", chat_id=user.interlocutor, reply_markup=menus)
        await message.answer("üö∂‚Äç‚ôÇÔ∏è–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –¥–∏–∞–ª–æ–≥\n\nüí°–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
        await search_user_act(message)
    else:
        await message.answer("üßê–ù–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —á–∞—Ç —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º")

@dp.message_handler(commands="stop")
@dp.message_handler(text='–ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç')
async def leave_from_chat_act(message: types.Message):
    user = await db.get_user(chat=True, user=message.from_user.id)
    print(user)
    if user is not None:
        await db.delete_chat(user=message.from_user.id)
        await db.delete_chat(user=user.interlocutor)
        await bot.send_message(text="üòî–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø–æ–∫–∏–Ω—É—Ç—å –¥–∏–∞–ª–æ–≥...\n\nüí°–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?", chat_id=user.interlocutor, reply_markup=menus)
        await message.answer("üö∂‚Äç‚ôÇÔ∏è–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –¥–∏–∞–ª–æ–≥\n\nüí°–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?")
    else:
        await message.answer("üßê–ù–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —á–∞—Ç —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º")
 
 
@dp.message_handler(content_types=["text", "sticker", "photo", "voice", "document"])
async def some_text(message: types.Message):
    user = await db.get_user(chat=True, user=message.from_user.id)
    print(user)
    if user is None:
        await message.answer("üßê–ù–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —á–∞—Ç —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º")
        return
    if message.content_type == "sticker":
        try:
            await bot.send_sticker(chat_id=user.interlocutor, sticker=message.sticker["file_id"])
        except TypeError:
            pass
    elif message.content_type == "photo":
        try:
            await bot.send_photo(chat_id=user.interlocutor, photo=message.photo[len(message.photo) - 1].file_id)
        except TypeError:
            pass
    elif message.content_type == "voice":
        try:
            await bot.send_voice(chat_id=user.interlocutor, voice=message.voice["file_id"])
        except TypeError:
            pass
    elif message.content_type == "document":
        try:
            await bot.send_document(chat_id=user.interlocutor, document=message.document["file_id"])
        except TypeError:
            pass
    else:
        try:
            await bot.send_message(text=message.text, chat_id=user.interlocutor)
        except TypeError:
            pass


async def init_app():
    await async_db_session.init()
    await async_db_session.create_all()

if __name__ == "__main__":
    ioloop = asyncio.get_event_loop()
    ioloop.create_task(init_app())
    tasks = [
        executor.start_polling(dp, skip_updates=True)
    ]
    ioloop.run_until_complete(asyncio.wait(tasks))
    ioloop.close()